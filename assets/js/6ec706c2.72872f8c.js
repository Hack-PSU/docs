"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[780],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=d(n),m=r,h=u["".concat(s,".").concat(m)]||u[m]||c[m]||o;return n?a.createElement(h,l(l({ref:t},p),{},{components:n})):a.createElement(h,l({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:r,l[1]=i;for(var d=2;d<o;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3184:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:1,id:"use-table"},l="useTable",i={unversionedId:"admin-web-app/hooks/use-table",id:"admin-web-app/hooks/use-table",title:"useTable",description:"The useTable provides core API integration with the React Table framework. It ensures some defaults that every table",source:"@site/docs/admin-web-app/hooks/01-useTable.md",sourceDirName:"admin-web-app/hooks",slug:"/admin-web-app/hooks/use-table",permalink:"/docs/admin-web-app/hooks/use-table",draft:!1,editUrl:"https://github.com/Hack-PSU/docs/docs/admin-web-app/hooks/01-useTable.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,id:"use-table"},sidebar:"mobileApp",previous:{title:"Hooks",permalink:"/docs/category/hooks"},next:{title:"useColumnDef",permalink:"/docs/admin-web-app/hooks/use-column-def"}},s={},d=[{value:"Options",id:"options",level:2},{value:"<code>usePagination</code>",id:"usepagination",level:3},{value:"<code>useExpanded</code>",id:"useexpanded",level:3},{value:"<code>useFilter</code>",id:"usefilter",level:3},{value:"<code>useSorted</code>",id:"usesorted",level:3},{value:"<code>useDraggable</code>",id:"usedraggable",level:3},{value:"<code>formatter</code>",id:"formatter",level:3},{value:"<code>columnType</code>",id:"columntype",level:3},{value:"<code>renderSubRows</code>",id:"rendersubrows",level:3},{value:"<code>onDragEnd</code>",id:"ondragend",level:3},{value:"<code>getDraggableOrder</code>",id:"getdraggableorder",level:3}],p={toc:d};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"usetable"},"useTable"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"useTable")," provides core API integration with the React Table framework. It ensures some defaults that every table\ncomponent should have and consolidates these options into a single interface to customize the table."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"type useTable = <TData extends RowData>(\n  options: UseTableOptions<TData>\n) => UseTableReturn<TData>\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"UseTableOptions")," type extends ",(0,r.kt)("inlineCode",{parentName:"p"},"TableOptions")," from React Table\n(see ",(0,r.kt)("a",{parentName:"p",href:"https://tanstack.com/table/v8/docs/api/core/table#data"},"here")," for more info)."),(0,r.kt)("h2",{id:"options"},"Options"),(0,r.kt)("p",null,"The following options are the additions made to configure the generic ",(0,r.kt)("a",{parentName:"p",href:"/docs/admin-web-app/components/table"},"Table"),"\ncomponent."),(0,r.kt)("h3",{id:"usepagination"},(0,r.kt)("inlineCode",{parentName:"h3"},"usePagination")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"usePagination?: boolean\n")),(0,r.kt)("p",null,"Toggles whether a ",(0,r.kt)("a",{parentName:"p",href:"https://tanstack.com/table/v8/docs/api/features/pagination#getpaginationrowmodel"},"pagination model"),"\nwill be used. Defaults to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,r.kt)("h3",{id:"useexpanded"},(0,r.kt)("inlineCode",{parentName:"h3"},"useExpanded")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"useExpanded?: boolean\n")),(0,r.kt)("p",null,"Toggles whether an ",(0,r.kt)("a",{parentName:"p",href:"https://tanstack.com/table/v8/docs/api/features/expanding#getexpandedrowmodel"},"expanded model"),"\nwill be used. The functionality itself does not come from React Table, but is instead configured together with\n",(0,r.kt)("a",{parentName:"p",href:"#renderSubRows"},(0,r.kt)("inlineCode",{parentName:"a"},"renderSubRows")),". Defaults to ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("h3",{id:"usefilter"},(0,r.kt)("inlineCode",{parentName:"h3"},"useFilter")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"useFilter?: boolean\n")),(0,r.kt)("p",null,"Toggles whether a ",(0,r.kt)("a",{parentName:"p",href:"https://tanstack.com/table/v8/docs/api/features/filters#getfilteredrowmodel"},"filter model"),"\nwill be used. This functionality allows global filters through the search bar. Defaults to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,r.kt)("h3",{id:"usesorted"},(0,r.kt)("inlineCode",{parentName:"h3"},"useSorted")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"useSorted?: boolean\n")),(0,r.kt)("p",null,"Toggles whether a ",(0,r.kt)("a",{parentName:"p",href:"https://tanstack.com/table/v8/docs/api/features/sorting#getsortedrowmodel"},"sorted model"),"\nwill be used. This functionality will allow column-wise sorting. Defaults to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,r.kt)("h3",{id:"usedraggable"},(0,r.kt)("inlineCode",{parentName:"h3"},"useDraggable")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"useDraggable?: boolean\n")),(0,r.kt)("p",null,"Toggles whether rows should be draggable using ",(0,r.kt)("inlineCode",{parentName:"p"},"react-beautiful-dnd"),". Defaults to ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("h3",{id:"formatter"},(0,r.kt)("inlineCode",{parentName:"h3"},"formatter")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"type ColumnFormatterMeta = {\n  [key: string]: (value: unknown) => string\n}\n\nformatter?: ColumnFormattterMeta\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"formatter")," allows arbitrary cell values from the data object to be formatted. This can either be set through this hook\nor by using the ",(0,r.kt)("a",{parentName:"p",href:"/docs/admin-web-app/hooks/use-column-def"},"useColumnDef")," hook."),(0,r.kt)("h3",{id:"columntype"},(0,r.kt)("inlineCode",{parentName:"h3"},"columnType")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'type ColumnTypeMeta = {\n  [key: string]: \n    | {\n        type: "text" | "custom";\n      }\n    | {\n        type: "input";\n        inputName: string;\n        placeholder: string;\n      }  \n}\n\ncolumnType?: ColumnTypeMeta\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"columnType")," is an object specifying each column's type and how it should be rendered. This will be used when rendering\nrows to either display a text, input, or custom cell. When using ",(0,r.kt)("a",{parentName:"p",href:"/docs/admin-web-app/hooks/use-column-def"},"useColumnDef"),"\nthis configuration is automatically generated from the column definition."),(0,r.kt)("h3",{id:"rendersubrows"},(0,r.kt)("inlineCode",{parentName:"h3"},"renderSubRows")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"renderSubRows?: <TData extends RowData>(\n  row: TData\n) => React.ReactNode\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"renderSubRows")," receives the current row that has a nested structure for rendering expanded rows (see the judging table).\nIt returns a React node that will be used as the hidden row given that ",(0,r.kt)("inlineCode",{parentName:"p"},"useExpanded")," is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,r.kt)("h3",{id:"ondragend"},(0,r.kt)("inlineCode",{parentName:"h3"},"onDragEnd")),(0,r.kt)("p",null,"An extraction of the ",(0,r.kt)("inlineCode",{parentName:"p"},"onDragEnd")," method provided in ",(0,r.kt)("inlineCode",{parentName:"p"},"react-beautiful-dnd"),".\nSee ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/guides/types.md#responders"},"here"),"\nfor documentation."),(0,r.kt)("h3",{id:"getdraggableorder"},(0,r.kt)("inlineCode",{parentName:"h3"},"getDraggableOrder")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"getDraggableOrder?: (item: TData) => number\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"getDraggableOrder")," extracts the order of the row from a data object."))}u.isMDXComponent=!0}}]);