"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[818],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=d(n),u=r,f=p["".concat(s,".").concat(u)]||p[u]||m[u]||o;return n?a.createElement(f,i(i({ref:t},c),{},{components:n})):a.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var d=2;d<o;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},221:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:4,id:"data-model"},i="Data Models",l={unversionedId:"mobile-app/data-model",id:"mobile-app/data-model",title:"Data Models",description:"Data models are used to model JSON structures for transferring data across widgets, API endpoints, or integrating with",source:"@site/docs/mobile-app/04-Data Model.md",sourceDirName:"mobile-app",slug:"/mobile-app/data-model",permalink:"/docs/mobile-app/data-model",draft:!1,editUrl:"https://github.com/Hack-PSU/docs/docs/mobile-app/04-Data Model.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,id:"data-model"},sidebar:"mobileApp",previous:{title:"File Structure",permalink:"/docs/mobile-app/file-structure"},next:{title:"Screens",permalink:"/docs/mobile-app/screens"}},s={},d=[{value:"JSON Serialization",id:"json-serialization",level:2},{value:"Field Rename",id:"field-rename",level:3},{value:"Generating Serialization",id:"generating-serialization",level:2}],c={toc:d};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"data-models"},"Data Models"),(0,r.kt)("p",null,"Data models are used to model JSON structures for transferring data across widgets, API endpoints, or integrating with\nservices."),(0,r.kt)("h2",{id:"json-serialization"},"JSON Serialization"),(0,r.kt)("p",null,"Every model should always have the following line at the top under the import statement. This will allow the\nJSON serialization step to know the filename it should create."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"part '<model_name>.g.dart';\n")),(0,r.kt)("p",null,"Every model will have the following structure:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"@JsonSerializable(\n  createFactory: true,\n  createToJson: true,\n  fieldRename: FieldRename.snake,  // see below\n)\nclass Model {\n  Model({\n    // ...insert all fields\n  });\n  \n  factory Model.fromJson(Map<String, dynamic> json) => _$ModelFromJson(json);\n  \n  Map<String, dynamic> toJson() => _$ModelToJson(this);\n  \n  //...rest of field initialization\n}\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Replace the ",(0,r.kt)("inlineCode",{parentName:"p"},"Model")," class along with any symbols of the same name within the class to the name of the model.")),(0,r.kt)("h3",{id:"field-rename"},"Field Rename"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"fieldRename")," field is used to indicate the naming convention used in the incoming JSON object. If the JSON\nobject to be serialized uses snake case (underlines) use the ",(0,r.kt)("inlineCode",{parentName:"p"},"FieldRename.snake")," to cast names into the equivalent\nfields (provided that fields are camel case)."),(0,r.kt)("h2",{id:"generating-serialization"},"Generating Serialization"),(0,r.kt)("p",null,"To generate the finalized JSON serialization to be used in other models:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"flutter pub run build_runner build\n")))}p.isMDXComponent=!0}}]);